name: Build and Deploy to Cloud Run
run-name: '[${{inputs.version}}] Build and Deploy'

on:
  # Automatically trigger build/deploy to dev for feature branches
  push:
    branches:
      - 'feature/**'
      - 'bugfix/**'
      - 'dev'
  # Keep manual workflow trigger
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to Release'
        required: true
        default: v0
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - prd
          - staging

env:
  IMAGE: australia-southeast1-docker.pkg.dev/dina-uniform-group/dina-images/proposal-screening
  PROJECT_ID: dina-uniform-group

jobs:
  # Set version for automated builds
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      environment: ${{ steps.set-environment.outputs.environment }}
    steps:
      - name: Set environment and version for manual trigger
        if: github.event_name == 'workflow_dispatch'
        id: manual-version
        run: |
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${{ inputs.environment }}" >> $GITHUB_ENV

      - name: Set environment and version for automated trigger
        if: github.event_name == 'push'
        id: auto-version
        run: |
          # For automatic builds, use branch name and short commit SHA
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          
          # Replace slashes with hyphens for version safety
          SAFE_BRANCH=$(echo $BRANCH_NAME | tr '/' '-')
          
          # Generate version: branch-shortsha format
          AUTO_VERSION="v0-${SAFE_BRANCH}-${SHORT_SHA}"
          
          echo "VERSION=${AUTO_VERSION}" >> $GITHUB_ENV
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          
          echo "Automated build - Branch: ${BRANCH_NAME}, Version: ${AUTO_VERSION}"

      - name: Output version and environment
        id: set-version
        run: |
          echo "version=${{ env.VERSION }}" >> $GITHUB_OUTPUT
          
      - name: Output environment
        id: set-environment
        run: |
          echo "environment=${{ env.ENVIRONMENT }}" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set Version
      run: |
        echo "IMAGE_VERSION=${{needs.prepare.outputs.version}}" >> $GITHUB_ENV
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{env.PROJECT_ID}}
        service_account_key: ${{secrets.SVC_ACCOUNT_JSON}}
        export_default_credentials: true
    
    - name: Set up Docker
      uses: docker/setup-buildx-action@v1
  
    - name: Login to Artifact Registry
      run: |
        gcloud auth configure-docker \
          australia-southeast1-docker.pkg.dev
    
    - name: Build and Push Docker image (Prod)
      if: github.ref == 'refs/heads/main' && needs.prepare.outputs.environment == 'prd'
      uses: docker/build-push-action@v2
      with:
        file: ./Dockerfile
        tags: ${{env.IMAGE}}:latest, ${{env.IMAGE}}:${{needs.prepare.outputs.version}}
        push: true

    - name: Build and Push Docker image (Staging)
      if: needs.prepare.outputs.environment == 'staging'
      uses: docker/build-push-action@v2
      with:
        file: ./Dockerfile
        tags: ${{env.IMAGE}}-staging:latest, ${{env.IMAGE}}-staging:${{needs.prepare.outputs.version}}
        push: true

    - name: Build and Push Docker image (Dev)
      if: needs.prepare.outputs.environment == 'dev'
      uses: docker/build-push-action@v2
      with:
        file: ./Dockerfile
        tags: ${{env.IMAGE}}-dev:latest, ${{env.IMAGE}}-dev:${{needs.prepare.outputs.version}}
        push: true
  
  deploy:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: dina-uniform-group
        service_account_key: ${{secrets.SVC_ACCOUNT_JSON}}
        export_default_credentials: true

    - name: Deploy Flask app to Cloud run (Prod)
      if: github.ref == 'refs/heads/main' && needs.prepare.outputs.environment == 'prd'
      run: |
        gcloud run deploy \
          dina-uniforms-proposal-screening \
          --image ${{env.IMAGE}}:${{needs.prepare.outputs.version}} \
          --platform managed \
          --service-account automations@dina-uniform-group.iam.gserviceaccount.com \
          --project dina-uniform-group \
          --region australia-southeast1 \
          --memory '8Gi' \
          --set-secrets=DISCORD_AUTH=discord-auth-lcla:latest,NOTION_KEY=notion-key:latest,OPENAI_KEY=dina-lcla-openai-key:latest,POSTGRES_PASSWORD=postgres-automations-password:latest,CLIENT_ID=azure-client-id:latest,TENANT_ID=azure-tenant-id:latest,CLIENT_SECRET=azure-client-secret:latest,TENANT_NAME=azure-tenant-name:latest,SITE_NAME=azure-site-name:latest,SSR_INPUT_PATH=ssr-input-path:latest,SSR_OUTPUT_PATH=ssr-output-path:latest,PRODUCT_LIST_PREFIX=ssr-product-prefix:latest,SSR_SUMMARY_PREFIX=ssr-summary-prefix:latest,OOR_INPUT_PREFIX=oor-input-prefix:latest,OOR_INPUT_PATH=oor-input-path:latest,OOR_OUTPUT_PATH=oor-output-path:latest \
          --cpu 2.0 \
          --allow-unauthenticated \
          --timeout 3600

    - name: Deploy Flask app to Cloud run (Staging)
      if: needs.prepare.outputs.environment == 'staging'
      run: |
        gcloud run deploy \
          dina-uniforms-proposal-screening-staging \
          --image ${{env.IMAGE}}-staging:${{needs.prepare.outputs.version}} \
          --platform managed \
          --service-account automations@dina-uniform-group.iam.gserviceaccount.com \
          --project dina-uniform-group \
          --region australia-southeast1 \
          --memory '8Gi' \
          --set-secrets=DISCORD_AUTH=discord-auth-lcla:latest,NOTION_KEY=notion-key:latest,OPENAI_KEY=dina-lcla-openai-key:latest,POSTGRES_PASSWORD=postgres-automations-password:latest,CLIENT_ID=azure-client-id:latest,TENANT_ID=azure-tenant-id:latest,CLIENT_SECRET=azure-client-secret:latest,TENANT_NAME=azure-tenant-name:latest,SITE_NAME=azure-site-name:latest,SSR_INPUT_PATH=ssr-input-path:latest,SSR_OUTPUT_PATH=ssr-output-path:latest,PRODUCT_LIST_PREFIX=ssr-product-prefix:latest,SSR_SUMMARY_PREFIX=ssr-summary-prefix:latest,OOR_INPUT_PREFIX=oor-input-prefix:latest,OOR_INPUT_PATH=oor-input-path:latest,OOR_OUTPUT_PATH=oor-output-path:latest \
          --cpu 2.0 \
          --allow-unauthenticated \
          --timeout 3600

    - name: Deploy Flask app to Cloud run (Dev)
      if: needs.prepare.outputs.environment == 'dev'
      run: |
        gcloud run deploy \
          dina-uniforms-proposal-screening-dev \
          --image ${{env.IMAGE}}-dev:${{needs.prepare.outputs.version}} \
          --platform managed \
          --service-account automations@dina-uniform-group.iam.gserviceaccount.com \
          --project dina-uniform-group \
          --region australia-southeast1 \
          --memory '8Gi' \
          --set-secrets=DISCORD_AUTH=discord-auth-lcla:latest,NOTION_KEY=notion-key:latest,OPENAI_KEY=dina-lcla-openai-key:latest,POSTGRES_PASSWORD=postgres-automations-password:latest,CLIENT_ID=azure-client-id:latest,TENANT_ID=azure-tenant-id:latest,CLIENT_SECRET=azure-client-secret:latest,TENANT_NAME=azure-tenant-name:latest,SITE_NAME=azure-site-name:latest,SSR_INPUT_PATH=ssr-input-path:latest,SSR_OUTPUT_PATH=ssr-output-path:latest,PRODUCT_LIST_PREFIX=ssr-product-prefix:latest,SSR_SUMMARY_PREFIX=ssr-summary-prefix:latest,OOR_INPUT_PREFIX=oor-input-prefix:latest,OOR_INPUT_PATH=oor-input-path:latest,OOR_OUTPUT_PATH=oor-output-path:latest \
          --cpu 2.0 \
          --allow-unauthenticated \
          --timeout 3600