name: Build and Deploy to Cloud Run
run-name: '[${{inputs.version}}] Build and Deploy'

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to Release'
        required: true
        default: v0
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - prd

env:
  IMAGE: australia-southeast1-docker.pkg.dev/dina-uniform-group/dina-images/proposal-screening
  PROJECT_ID: dina-uniform-group
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set Version
      run: |
        echo "IMAGE_VERSION=${{inputs.version}}" >> $GITHUB_ENV
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: ${{env.PROJECT_ID}}
        service_account_key: ${{secrets.SVC_ACCOUNT_JSON}}
        export_default_credentials: true
    
    - name: Set up Docker
      uses: docker/setup-buildx-action@v1
  
    - name: Login to Artifact Registry
      run: |
        gcloud auth configure-docker \
          australia-southeast1-docker.pkg.dev
    
    - name: Build and Push Docker image (Prod)
      if: github.ref == 'refs/heads/main' && inputs.environment == 'prd'
      uses: docker/build-push-action@v2
      with:
        file: ./Dockerfile
        tags: ${{env.IMAGE}}:latest, ${{env.IMAGE}}:${{ inputs.version }}
        push: true

    - name: Build and Push Docker image (Dev)
      if: inputs.environment == 'dev'
      uses: docker/build-push-action@v2
      with:
        file: ./Dockerfile
        tags: ${{env.IMAGE}}-dev:latest, ${{env.IMAGE}}-dev:${{ inputs.version }}
        push: true
  
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        project_id: dina-uniform-group
        service_account_key: ${{secrets.SVC_ACCOUNT_JSON}}
        export_default_credentials: true

    - name: Deploy Flask app to Cloud run (Prod) # TODO - Add other API keys to google secret manager
      if: github.ref == 'refs/heads/main' && inputs.environment == 'prd'
      run: |
        gcloud run deploy \
          dina-uniforms-proposal-screening \
          --image ${{env.IMAGE}}:${{ inputs.version }} \
          --platform managed \
          --service-account automations@dina-uniform-group.iam.gserviceaccount.com \
          --project dina-uniform-group \
          --region australia-southeast1 \
          --memory '8Gi' \
          --set-secrets=DISCORD_AUTH=discord-auth-lcla:latest,NOTION_KEY=notion-key:latest,OPENAI_KEY=dina-lcla-openai-key:latest,POSTGRES_PASSWORD=postgres-automations-password:latest,CLIENT_ID=azure-client-id:latest,TENANT_ID=azure-tenant-id:latest,CLIENT_SECRET=azure-client-secret:latest,TENANT_NAME=azure-tenant-name:latest,SITE_NAME=azure-site-name:latest,SSR_INPUT_PATH=ssr-input-path:latest,SSR_OUTPUT_PATH=ssr-output-path:latest,PRODUCT_LIST_PREFIX=ssr-product-prefix:latest,SSR_SUMMARY_PREFIX=ssr-summary-prefix:latest \
          --cpu 2.0 \
          --allow-unauthenticated \
          --timeout 3600

    - name: Deploy Flask app to Cloud run (Dev)
      if: inputs.environment == 'dev'
      run: |
        gcloud run deploy \
          dina-uniforms-proposal-screening-dev \
          --image ${{env.IMAGE}}-dev:${{ inputs.version }} \
          --platform managed \
          --service-account automations@dina-uniform-group.iam.gserviceaccount.com \
          --project dina-uniform-group \
          --region australia-southeast1 \
          --memory '8Gi' \
          --set-secrets=DISCORD_AUTH=discord-auth-lcla:latest,NOTION_KEY=notion-key:latest,OPENAI_KEY=dina-lcla-openai-key:latest,POSTGRES_PASSWORD=postgres-automations-password:latest,CLIENT_ID=azure-client-id:latest,TENANT_ID=azure-tenant-id:latest,CLIENT_SECRET=azure-client-secret:latest,TENANT_NAME=azure-tenant-name:latest,SITE_NAME=azure-site-name:latest,SSR_INPUT_PATH=ssr-input-path:latest,SSR_OUTPUT_PATH=ssr-output-path:latest,PRODUCT_LIST_PREFIX=ssr-product-prefix:latest,SSR_SUMMARY_PREFIX=ssr-summary-prefix:latest \
          --cpu 2.0 \
          --allow-unauthenticated \
          --timeout 3600

  # release:
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main'
  #   needs: [deploy]
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2

  #   # Create a GitHub release with the calculated version
  #   - name: Create Release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ inputs.version }}
  #       release_name: Release ${{ inputs.version }}
  #       draft: false
  #       prerelease: false